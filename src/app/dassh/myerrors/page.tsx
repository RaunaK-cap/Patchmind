"use client";
import { useEffect, useMemo, useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { vscDarkPlus } from "react-syntax-highlighter/dist/esm/styles/prism";
import axios from "axios";
import { authClient } from "@/lib/auth-client";
import { redirect } from "next/navigation";
import { Copy, Loader2, RefreshCw, Trash2 } from "lucide-react";

interface ErrorData {
  id: string;
  title: string;
  solution: string;
  codesnippet: string;
  tag: string;
  createdAt: string;
  status: string;
}

// Subtle shimmer skeleton //Generated by AI 
const SkeletonCard = () => (
  <div className="relative rounded-2xl border border-white/10 bg-white/5 dark:bg-neutral-900/40 p-4 overflow-hidden shadow-sm animate-pulse">
    <div className="h-5 w-40 rounded bg-white/10" />
    <div className="mt-4 space-y-2">
      <div className="h-3 w-11/12 rounded bg-white/10" />
      <div className="h-3 w-10/12 rounded bg-white/10" />
      <div className="h-3 w-8/12 rounded bg-white/10" />
    </div>
    <div className="mt-4 h-40 rounded bg-white/10" />
    <div className="mt-4 flex items-center justify-between">
      <div className="h-6 w-24 rounded bg-white/10" />
      <div className="h-6 w-28 rounded bg-white/10" />
    </div>
  </div>
);

export default function Page() {
  const { data: session } = authClient.useSession();
  const [errors, setErrors] = useState<ErrorData[]>([]);
  const [loading, setLoading] = useState(true);
  const [copyingId, setCopyingId] = useState<string | null>(null);
  const [refreshing, setRefreshing] = useState(false);

  if (!session) {
    redirect("/");
  }

  useEffect(()=>{

    const fetchErrors = async () => {
      try {
        setLoading(true);
        const response = await axios.post("/api/getdata", {
          id: session?.user.id,
        });
        setErrors(response.data.data || []);
      } catch (error) {
        console.error("Error fetching data:", error);
        setErrors([]);
      } finally {
        setLoading(false);
      }
    };
  
    if (session?.user?.id) {
      fetchErrors();
    }
  } , [session?.user?.id])

 

  const handleDelete = async (id: string) => {
    try {
      await axios.delete("/api/delete", {
        data: { id },
      });
      await refetchWithSpin();
    } catch (error) {
      console.error("Error deleting:", error);
    }
  };

  const refetchWithSpin = async () => {
    try {
      setRefreshing(true);
      await fetchErrors();
    } finally {
      setRefreshing(false);
    }
  };

  const handleCopy = async (id: string, text: string) => {
    try {
      setCopyingId(id);
      await navigator.clipboard.writeText(text || "");
    } finally {
      setTimeout(() => setCopyingId(null), 600);
    }
  };

  const headerSubtitle = useMemo(() => {
    if (loading) return "Syncing your patches...";
    if (!errors?.length) return "No logs yet – ship some code and add ";
    return `${errors.length} ${errors.length === 1 ? "entry" : "entries"}`;
  }, [loading, errors]);

  return (
    <div className="min-h-[100dvh] w-full bg-gradient-to-br from-amber-50 via-white to-rose-50 dark:from-[#0b0b0c] dark:via-[#0d0d10] dark:to-[#0a0a0b]">
      
      <div className="sticky top-0 z-20 backdrop-blur supports-[backdrop-filter]:bg-white/50 dark:supports-[backdrop-filter]:bg-black/20 border-b border-black/5 dark:border-white/10">
        <div className="mx-auto max-w-7xl px-4 py-3 flex items-center justify-between">
          <div className="flex items-baseline gap-3">
            
            <div>
              <h1 className="text-xl font-semibold tracking-tight">Your – Error Journal</h1>
              <p className="text-xs text-muted-foreground">{headerSubtitle}</p>
            </div>
          </div>

          <div className="flex items-center gap-2">
            <Button onClick={refetchWithSpin} variant="outline" size="sm" className="gap-2">
              {refreshing ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <RefreshCw className="h-4 w-4" />
              )}
              Refresh
            </Button>
          </div>
        </div>
      </div>

      
      <div className="mx-auto max-w-7xl px-4 py-6">
        {loading ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {Array.from({ length: 6 }).map((_, i) => (
              <SkeletonCard key={i} />
            ))}
          </div>
        ) : errors.length === 0 ? (
          <div className="flex flex-col items-center justify-center py-20 text-center">
            <div className="relative animate-fadeInUp">
              <div className="rounded-2xl border border-dashed border-black/10 dark:border-white/10 px-6 py-8 bg-white/50 dark:bg-white/5">
                <h2 className="text-lg font-semibold">Nothing here yet</h2>
                <div className="mt-4">
                  <Button onClick={refetchWithSpin} size="sm" variant="secondary" className="shadow">
                    Fetch again
                  </Button>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {errors.map((error) => (
              <Card
                key={error.id}
                className="relative group rounded-2xl border border-black/5 dark:border-white/10 bg-white/70 dark:bg-neutral-900/50 backdrop-blur-xl shadow-sm hover:shadow-xl transition-all duration-500 ease-in-out transform hover:-translate-y-1 animate-fadeInUp"
              >
                <div className="absolute inset-0 pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity">
                  <div className="absolute -inset-0.5 rounded-2xl bg-gradient-to-br from-amber-500/20 via-transparent to-rose-500/20 blur-lg" />
                </div>
                <CardContent className="p-4">
                  <div className="flex items-start justify-between gap-3">
                    <h2 className="text-base font-semibold leading-tight line-clamp-2">
                      {error.title}
                    </h2>
                    <div className="flex items-center gap-2">
                      <Badge
                        className={`capitalize border ${
                          error.status === "Resolved"
                            ? "bg-emerald-500/15 text-emerald-600 dark:text-emerald-300 border-emerald-500/20"
                            : "bg-amber-500/15 text-amber-600 dark:text-amber-300 border-amber-500/20"
                        }`}
                      >
                        {error.status}
                      </Badge>
                    </div>
                  </div>

                  
                  <div className="mt-3 text-sm leading-relaxed">
                    <p className="font-medium text-muted-foreground">Solution</p>
                    <p className="mt-1 whitespace-pre-wrap">
                      {error.solution}
                    </p>
                  </div>

                  
                  <div className="relative mt-4 rounded-xl border border-black/5 dark:border-white/10 bg-neutral-900 text-neutral-50 overflow-hidden">
                    <div className="absolute right-2 top-2 z-10 flex items-center gap-2">
                      <Button
                        onClick={() => handleCopy(error.id, error.codesnippet)}
                        size="icon"
                        variant="secondary"
                        className="h-7 w-7 rounded-lg hover:scale-[1.02] transition"
                        title={copyingId === error.id ? "Copied!" : "Copy code"}
                      >
                        {copyingId === error.id ? (
                          <Loader2 className="h-4 w-4 animate-spin" />
                        ) : (
                          <Copy className="h-4 w-4" />
                        )}
                      </Button>
                    </div>
                    <div className="relative max-h-64 overflow-auto no-scrollbar">
                      <SyntaxHighlighter
                        language="javascript"
                        style={vscDarkPlus}
                        customStyle={{
                          margin: 0,
                          padding: "12px 12px 16px 12px",
                          fontSize: "0.9rem",
                          background: "transparent",
                          whiteSpace: "pre-wrap",
                          wordBreak: "break-word",
                        }}
                        wrapLongLines
                      >
                        {error.codesnippet}
                      </SyntaxHighlighter>
                    </div>
                  </div>

                  
                  <div className="mt-4 flex items-center justify-between">
                    <div className="flex flex-wrap items-center gap-2">
                      <Badge className="bg-amber-500/15 text-amber-700 dark:text-amber-300 border border-amber-500/20">
                        {error.tag}
                      </Badge>
                      <Badge className="text-muted-foreground bg-black/5 dark:bg-white/5 border border-black/10 dark:border-white/10">
                        {new Date(error.createdAt).toLocaleDateString("en-US")}
                      </Badge>
                    </div>
                    <Button
                      onClick={() => handleDelete(error.id)}
                      variant="outline"
                      size="sm"
                      className="gap-2 hover:gap-2.5 transition-all"
                    >
                      <Trash2 className="h-4 w-4" />
                      Delete
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>

      
      <div className="pointer-events-none fixed -z-10 blur-3xl opacity-30 inset-0">
        <div className="absolute right-[-10%] top-[-10%] h-80 w-80 rounded-full bg-amber-500/30" />
        <div className="absolute left-[-10%] bottom-[-10%] h-96 w-96 rounded-full bg-rose-500/30" />
      </div>
    </div>
  );
}
